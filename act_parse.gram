/* Auto-generated by pgen, do not edit! */
/*
BNF: 109 bnf items


toplevel: [ imports_opens ] [ body ]
        ;

imports_opens: import_open_item imports_opens
             | import_open_item
             ;

body: body_item body
    | body_item
    ;

ns_body: ns_body_item ns_body
       | ns_body_item
       ;

ns_body_item: definition
            | namespace_management
            ;

body_item: namespace_management
         | base_item
         | definition
         ;

import_open_item: import_item
                | open_item
                ;

import_item: 'import' STRING ';'
           | 'import' [ '::' ] { ID '::' }* [ '->' ID ] ';'
           ;

open_item: 'open' qualified_ns '->' ID ';'
         | 'open' qualified_ns ';'
         ;

namespace_management: [ 'export' ] 'namespace' ID '{' [ ns_body ] '}'
                    ;

qualified_ns: [ '::' ] { ID '::' }*
            ;

param_type: 'pint'
          | 'pints'
          | 'pbool'
          | 'preal'
          | 'ptype' '<' physical_inst_type '>'
          ;

T_INT: 'int'
     | 'ints'
     ;

data_type: T_INT [ chan_dir ] [ '<' wint_expr '>' ]
         | 'bool' [ chan_dir ]
         | 'enum' [ chan_dir ] '<' wint_expr '>'
         ;

chan_type: 'chan' [ chan_dir ] '(' { data_type ',' }* ')'
         ;

chan_dir: '?'
        | '!'
        | '?!'
        | '!?'
        ;

physical_inst_type: data_type
                  | chan_type
                  | user_type
                  ;

inst_type: physical_inst_type
         | param_type
         ;

user_type: qualified_type [ template_args ] [ chan_dir ]
         ;

template_args: '<' { array_expr ',' }* '>'
             ;

qualified_type: [ '::' ] { ID '::' }*
              ;

dense_range: dense_one_range dense_range
           | dense_one_range
           ;

dense_one_range: '[' wint_expr ']'
               ;

sparse_range: sparse_one_range sparse_range
            | sparse_one_range
            ;

sparse_one_range: '[' !noreal wint_expr [ '..' wint_expr ] ']'
                ;

definition: defproc_or_cell
          | defdata
          | defchan
          | defenum
          | deffunc
          ;

def_or_proc: 'defproc'
           | 'defcell'
           ;

template_spec: 'export'
             | [ 'export' ] 'template' '<' { param_inst ';' }* [ '|'
                 { param_inst ';' }* ] '>'
             ;

param_inst: param_type id_list
          ;

id_list: { ID [ dense_range ] ',' }**
       ;

defproc_or_cell: [ template_spec ] def_or_proc ID
                   [ '(' port_formal_list ')' ] proc_body
               ;

proc_body: ';'
         | '{' def_body '}'
         ;

port_formal_list: { single_port_item ';' }*
                ;

single_port_item: [ '+' ] physical_inst_type id_list
                ;

defdata: [ template_spec ] 'deftype' ID is_a physical_inst_type
           [ '(' port_formal_list ')' ] data_body
       ;

is_a: '<:'
    | '='
    ;

data_body: ';'
         | '{' base_body [ methods_body ] '}'
         ;

methods_body: 'methods' '{' [ method_list ] '}'
            ;

method_list: one_method method_list
           | one_method
           ;

one_method: ID '{' hse_body '}'
          ;

base_body: lang_spec base_body
         | alias base_body
         |
         ;

defchan: [ template_spec ] 'defchan' ID is_a physical_inst_type
           [ '(' port_formal_list ')' ] chan_body
       ;

chan_body: ';'
         | '{' base_body [ methods_body ] '}'
         ;

defenum: 'defenum' ID enum_body
       ;

enum_body: ';'
         | '{' bare_id_list '}' ';'
         ;

bare_id_list: { ID ',' }*
            ;

deffunc: 'function' ID '('
           { param_inst ';' }* ')' ':' param_type func_body
       ;

func_body: ';'
         | '{' '}'
         ;

def_body: base_item_list
        |
        ;

base_item_list: base_item base_item_list
              | base_item
              ;

base_item: instance
         | connection
         | alias
         | language_body
         | loop
         | conditional
         ;

instance: [ '+' ] inst_type { instance_id ',' }* ';'
        ;

special_connection_id: ID [ dense_range ] '(' port_conn_spec ')'
                         [ '@' attr_list ]
                     | ID [ dense_range ] '@' attr_list
                     ;

instance_id: ID [ sparse_range ] [ '(' port_conn_spec ')' ]
               [ '@' attr_list ] opt_extra_conn
           ;

opt_extra_conn: [ '=' { array_expr '=' }** ]
              ;

port_conn_spec: { opt_array_expr ',' }*
              | { '.' ID '=' array_expr ',' }**
              ;

alias: array_expr '=' { array_expr '=' }* ';'
     ;

connection: special_connection_id ';'
          ;

loop: '(' ';' ID ':' !noreal wint_expr
        [ '..' wint_expr ] ':' base_item_list ')'
    ;

conditional: '[' guarded_cmds ']'
           ;

guarded_cmds: { gc_1 '[]' }*
            ;

gc_1: wbool_expr '->' base_item_list
    | 'else' '->' base_item_list
    ;

language_body: lang_chp
             | lang_hse
             | lang_prs
             | lang_spec
             | lang_size
             ;

supply_spec: '<' bool_expr_id [ ',' bool_expr_id ]
               [ '|' bool_expr_id ',' bool_expr_id ] '>'
           ;

lang_chp: 'chp' [ supply_spec ] '{' [ chp_body ] '}'
        ;

lang_hse: 'hse' [ supply_spec ] '{' [ hse_body ] '}'
        ;

lang_prs: 'prs' [ supply_spec ] '{' [ prs_body ] '}'
        ;

lang_spec: 'spec' '{' [ spec_body ] '}'
         ;

chp_body: { chp_comma_list ';' }*
        ;

chp_comma_list: { chp_body_item ',' }*
              ;

chp_body_item: base_stmt
             | select_stmt
             | loop_stmt
             ;

base_stmt: send_stmt
         | recv_stmt
         | assign_stmt
         | 'skip'
         | '(' chp_body ')'
         | ID '(' { chp_log_item ',' }* ')'
         ;

chp_log_item: expr_id
            | STRING
            ;

send_stmt: expr_id '!' send_data
         ;

send_data: w_expr
         | '(' { w_expr ',' }* ')'
         ;

recv_stmt: expr_id '?' recv_id
         ;

recv_id: expr_id
       | '(' { expr_id ',' }** ')'
       ;

assign_stmt: expr_id ':=' w_expr
           | expr_id dir
           ;

select_stmt: '[' { guarded_cmd '[]' }* ']'
           | '[' wbool_expr ']'
           ;

guarded_cmd: wbool_expr '->' chp_body
           | 'else' '->' chp_body
           ;

loop_stmt: '*[' chp_body ']'
         | '*[' { guarded_cmd '[]' }* ']'
         ;

hse_body: { hse_body_item ';' }*
        ;

hse_body_item: { hse_assign_stmt ',' }*
             | hse_loop_stmt
             | hse_select_stmt
             | 'skip'
             | '(' hse_body ')'
             ;

hse_assign_stmt: expr_id dir
               ;

hse_select_stmt: '[' { hse_guarded_cmd '[]' }* ']'
               | '[' wbool_expr ']'
               ;

hse_guarded_cmd: wbool_expr '->' hse_body
               | 'else' '->' hse_body
               ;

hse_loop_stmt: '*[' hse_body ']'
             | '*[' { hse_guarded_cmd '[]' }* ']'
             ;

prs_body: [ attr_list ] single_prs prs_body
        | [ attr_list ] single_prs
        ;

attr_list: '[' { ID '=' w_expr ';' }** ']'
         ;

single_prs:EXTERN[prs_expr] arrow bool_expr_id dir
          |EXTERN[prs_expr] arrow '@' ID dir
          | ID [ tree_subckt_spec ] '{' prs_body '}'
          | '(' [ ':' ] ID ':' !noreal wint_expr
              [ '..' wint_expr ] ':' prs_body ')'
          | 'passn' size_spec '(' bool_expr_id ',' bool_expr_id ',' bool_expr_id ')'
          | 'passp' size_spec '(' bool_expr_id ',' bool_expr_id ',' bool_expr_id ')'
          | 'transgate' size_spec '(' bool_expr_id ',' bool_expr_id ',' bool_expr_id ',' bool_expr_id ')'
          ;

arrow: '->'
     | '=>'
     | '#>'
     ;

dir: '+'
   | '-'
   ;

tree_subckt_spec: '<' wint_expr '>'
                | '<' STRING '>'
                ;

bool_expr_id: expr_id
            ;

size_spec: '<' wnumber_expr [ ',' wnumber_expr ] [ ',' ID
             [ ':' INT ] ] '>'
         |
         ;

spec_body: spec_body_item spec_body
         | spec_body_item
         ;

spec_body_item: ID '(' { bool_expr_id ',' }* ')'
              | '$(' wbool_expr ')'
              ;

lang_size: 'size' '{' [ size_body ] '}'
         ;

strength_directive: bool_expr_id dir '->' wint_expr
                  ;

size_body: { strength_directive ';' }*
         ;

array_expr: { array_term '#' }*
          ;

array_term: '{' { array_expr ',' }* '}'
          | w_expr
          ;

opt_array_expr: [ array_expr ]
              ;

expr_id: { base_id '.' }*
       ;

base_id: ID [ sparse_range ]
       ;

w_expr: expr
      ;

wnumber_expr: expr
            ;

wint_expr: int_expr
         ;

wbool_expr: bool_expr
          ;


*/
